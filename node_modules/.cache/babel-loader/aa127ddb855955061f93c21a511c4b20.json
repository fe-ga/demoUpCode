{"ast":null,"code":"import * as types from './../constants/ActionTypes'; // var data= JSON.parse(localStorage.getItem(\"Products\"));\n// var initialState =data ?  data : [];\n\nvar initialState = [{\n  ID: 11100,\n  Price: 1000,\n  Name: 'samsung s1',\n  Brand: 'SamSung'\n}, {\n  ID: 1,\n  Price: 10200,\n  Name: 'samsung s2',\n  Brand: 'SamSung'\n}, {\n  ID: 2,\n  Price: 10300,\n  Name: 'samsung s3',\n  Brand: 'SamSung'\n}, {\n  ID: 3,\n  Price: 10040,\n  Name: 'samsung s4',\n  Brand: 'SamSung'\n}];\n\nvar findIndex = (Products, id) => {\n  var result = -1;\n  Products.forEach((value, index) => {\n    if (value.ID == id) result = index;\n  });\n  return result;\n};\n\nvar randomID = function () {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.Add_Product:\n      var id = action.ID;\n      var index = findIndex(state, id);\n      var newProduct = {\n        ID: randomID(),\n        Price: action.Product.price,\n        Name: action.Product.name,\n        Brand: action.Product.brand\n      };\n      state.push(newProduct); // localStorage.setItem('Products', JSON.stringify(state))\n\n      return [...state];\n\n    case types.Delete_Product:\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n\n      return [...state];\n\n    case types.Edit_Product:\n      var ID = action.Product.id;\n      var Index = findIndex([...state], ID);\n      console.log(Index); // if (index !== -1) {\n      //         state[Index] = action.Product;\n      // }\n\n      return state[In];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["D:/ReactJS/bandienthoai/src/reducers/Products.js"],"names":["types","initialState","ID","Price","Name","Brand","findIndex","Products","id","result","forEach","value","index","randomID","Math","random","toString","substr","myReducer","state","action","type","LIST_ALL","Add_Product","newProduct","Product","price","name","brand","push","Delete_Product","splice","Edit_Product","Index","console","log","In"],"mappings":"AAAA,OAAO,KAAMA,KAAb,MAAwB,4BAAxB,C,CACA;AACA;;AACA,IAAIC,YAAY,GAAG,CACX;AAAEC,EAAAA,EAAE,EAAE,KAAN;AAAaC,EAAAA,KAAK,EAAE,IAApB;AAA0BC,EAAAA,IAAI,EAAE,YAAhC;AAA8CC,EAAAA,KAAK,EAAE;AAArD,CADW,EAEX;AAAEH,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE,KAAhB;AAAuBC,EAAAA,IAAI,EAAE,YAA7B;AAA2CC,EAAAA,KAAK,EAAE;AAAlD,CAFW,EAGX;AAAEH,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE,KAAhB;AAAuBC,EAAAA,IAAI,EAAE,YAA7B;AAA2CC,EAAAA,KAAK,EAAE;AAAlD,CAHW,EAIX;AAAEH,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,KAAK,EAAE,KAAhB;AAAuBC,EAAAA,IAAI,EAAE,YAA7B;AAA2CC,EAAAA,KAAK,EAAE;AAAlD,CAJW,CAAnB;;AAMA,IAAIC,SAAS,GAAG,CAACC,QAAD,EAAWC,EAAX,KAAkB;AAC1B,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,QAAID,KAAK,CAACT,EAAN,IAAYM,EAAhB,EACQC,MAAM,GAAGG,KAAT;AACf,GAHD;AAKA,SAAOH,MAAP;AACP,CARD;;AASA,IAAII,QAAQ,GAAG,YAAY;AACnB;AACA;AACA;AACA,SAAO,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAb;AACP,CALD;;AAMA,IAAIC,SAAS,GAAG,CAACC,KAAK,GAAGlB,YAAT,EAAuBmB,MAAvB,KAAkC;AAG1C,UAAQA,MAAM,CAACC,IAAf;AACQ,SAAKrB,KAAK,CAACsB,QAAX;AACQ,aAAOH,KAAP;;AACR,SAAKnB,KAAK,CAACuB,WAAX;AACQ,UAAIf,EAAE,GAAGY,MAAM,CAAClB,EAAhB;AAEA,UAAIU,KAAK,GAAGN,SAAS,CAACa,KAAD,EAAQX,EAAR,CAArB;AACA,UAAIgB,UAAU,GAAG;AACTtB,QAAAA,EAAE,EAAEW,QAAQ,EADH;AAETV,QAAAA,KAAK,EAAEiB,MAAM,CAACK,OAAP,CAAeC,KAFb;AAGTtB,QAAAA,IAAI,EAAEgB,MAAM,CAACK,OAAP,CAAeE,IAHZ;AAITtB,QAAAA,KAAK,EAAEe,MAAM,CAACK,OAAP,CAAeG;AAJb,OAAjB;AAMAT,MAAAA,KAAK,CAACU,IAAN,CAAWL,UAAX,EAVR,CAWQ;;AACA,aAAO,CAAC,GAAGL,KAAJ,CAAP;;AACR,SAAKnB,KAAK,CAAC8B,cAAX;AACQ,UAAIlB,KAAK,KAAK,CAAC,CAAf,EAAkB;AACVO,QAAAA,KAAK,CAACY,MAAN,CAAanB,KAAb,EAAoB,CAApB;AACP;;AACD,aAAO,CAAC,GAAGO,KAAJ,CAAP;;AACR,SAAKnB,KAAK,CAACgC,YAAX;AACQ,UAAI9B,EAAE,GAAGkB,MAAM,CAACK,OAAP,CAAejB,EAAxB;AACA,UAAIyB,KAAK,GAAG3B,SAAS,CAAC,CAAC,GAAGa,KAAJ,CAAD,EAAajB,EAAb,CAArB;AACAgC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAHR,CAIQ;AAEA;AACA;;AAEA,aAAOd,KAAK,CAACiB,EAAD,CAAZ;;AACR;AAAS,aAAOjB,KAAP;AA/BjB;AAkCP,CArCD;;AAsCA,eAAeD,SAAf","sourcesContent":["import *  as types from './../constants/ActionTypes';\r\n// var data= JSON.parse(localStorage.getItem(\"Products\"));\r\n// var initialState =data ?  data : [];\r\nvar initialState = [\r\n        { ID: 11100, Price: 1000, Name: 'samsung s1', Brand: 'SamSung' },\r\n        { ID: 1, Price: 10200, Name: 'samsung s2', Brand: 'SamSung' },\r\n        { ID: 2, Price: 10300, Name: 'samsung s3', Brand: 'SamSung' },\r\n        { ID: 3, Price: 10040, Name: 'samsung s4', Brand: 'SamSung' }\r\n];\r\nvar findIndex = (Products, id) => {\r\n        var result = -1;\r\n        Products.forEach((value, index) => {\r\n                if (value.ID == id)\r\n                        result = index;\r\n        });\r\n        \r\n        return result;\r\n}\r\nvar randomID = function () {\r\n        // Math.random should be unique because of its seeding algorithm.\r\n        // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n        // after the decimal.\r\n        return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\nvar myReducer = (state = initialState, action) => {\r\n\r\n\r\n        switch (action.type) {\r\n                case types.LIST_ALL:\r\n                        return state;\r\n                case types.Add_Product:\r\n                        var id = action.ID;\r\n                        \r\n                        var index = findIndex(state, id);\r\n                        var newProduct = {\r\n                                ID: randomID(),\r\n                                Price: action.Product.price,\r\n                                Name: action.Product.name,\r\n                                Brand: action.Product.brand\r\n                        }\r\n                        state.push(newProduct);\r\n                        // localStorage.setItem('Products', JSON.stringify(state))\r\n                        return [...state];\r\n                case types.Delete_Product:\r\n                        if (index !== -1) {\r\n                                state.splice(index, 1)\r\n                        }\r\n                        return [...state];\r\n                case types.Edit_Product:\r\n                        var ID = action.Product.id;\r\n                        var Index = findIndex([...state], ID);\r\n                        console.log(Index);\r\n                        // if (index !== -1) {\r\n\r\n                        //         state[Index] = action.Product;\r\n                        // }\r\n                        \r\n                        return state[In]\r\n                default: return state;\r\n\r\n        }\r\n};\r\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}