{"ast":null,"code":"import * as types from './../constants/ActionTypes'; // var data= JSON.parse(localStorage.getItem(\"Products\"));\n// var initialState =data ?  data : [];\n// var initialState = [\n//         { ID: 11100, Price: 1000, Name: 'samsung s1', Brand: 'SamSung' },\n//         { ID: 1, Price: 10200, Name: 'samsung s2', Brand: 'SamSung' },\n//         { ID: 2, Price: 10300, Name: 'samsung s3', Brand: 'SamSung' },\n//         { ID: 3, Price: 10040, Name: 'samsung s4', Brand: 'SamSung' }\n// ];\n\nvar initialState = [];\n\nvar findIndex = (Products, id) => {\n  var result = -1;\n  Products.forEach((value, index) => {\n    if (value.ID == id) result = index;\n  });\n  return result;\n};\n\nvar randomID = function () {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.Add_Product:\n      var id = action.ID;\n      var index = findIndex(state, id);\n      var newProduct = {\n        ID: randomID(),\n        Price: action.Product.Price,\n        Name: action.Product.Name,\n        Brand: action.Product.bBrand\n      };\n      state.push(newProduct); // localStorage.setItem('Products', JSON.stringify(state))\n\n      return [...state];\n\n    case types.Delete_Product:\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n\n      return [...state];\n\n    case types.Edit_Product:\n      var ID = action.Product.ID;\n      var Index = findIndex([...state], ID);\n\n      if (Index !== -1) {\n        console.log(action.Product);\n        state[Index] = action.Product;\n      }\n\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["D:/ReactJS/bandienthoai/src/reducers/Products.js"],"names":["types","initialState","findIndex","Products","id","result","forEach","value","index","ID","randomID","Math","random","toString","substr","myReducer","state","action","type","LIST_ALL","Add_Product","newProduct","Price","Product","Name","Brand","bBrand","push","Delete_Product","splice","Edit_Product","Index","console","log"],"mappings":"AAAA,OAAO,KAAMA,KAAb,MAAwB,4BAAxB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,YAAY,GAAG,EAAnB;;AACA,IAAIC,SAAS,GAAG,CAACC,QAAD,EAAWC,EAAX,KAAkB;AAC1B,MAAIC,MAAM,GAAG,CAAC,CAAd;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,QAAID,KAAK,CAACE,EAAN,IAAYL,EAAhB,EACQC,MAAM,GAAGG,KAAT;AACf,GAHD;AAKA,SAAOH,MAAP;AACP,CARD;;AASA,IAAIK,QAAQ,GAAG,YAAY;AACnB;AACA;AACA;AACA,SAAO,MAAMC,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,EAAqC,CAArC,CAAb;AACP,CALD;;AAMA,IAAIC,SAAS,GAAG,CAACC,KAAK,GAAGf,YAAT,EAAuBgB,MAAvB,KAAkC;AAG1C,UAAQA,MAAM,CAACC,IAAf;AACQ,SAAKlB,KAAK,CAACmB,QAAX;AACQ,aAAOH,KAAP;;AACR,SAAKhB,KAAK,CAACoB,WAAX;AACQ,UAAIhB,EAAE,GAAGa,MAAM,CAACR,EAAhB;AACA,UAAID,KAAK,GAAGN,SAAS,CAACc,KAAD,EAAQZ,EAAR,CAArB;AACA,UAAIiB,UAAU,GAAG;AACTZ,QAAAA,EAAE,EAAEC,QAAQ,EADH;AAETY,QAAAA,KAAK,EAAEL,MAAM,CAACM,OAAP,CAAeD,KAFb;AAGTE,QAAAA,IAAI,EAAEP,MAAM,CAACM,OAAP,CAAeC,IAHZ;AAITC,QAAAA,KAAK,EAAER,MAAM,CAACM,OAAP,CAAeG;AAJb,OAAjB;AAMAV,MAAAA,KAAK,CAACW,IAAN,CAAWN,UAAX,EATR,CAUQ;;AACA,aAAO,CAAC,GAAGL,KAAJ,CAAP;;AACR,SAAKhB,KAAK,CAAC4B,cAAX;AACQ,UAAIpB,KAAK,KAAK,CAAC,CAAf,EAAkB;AACVQ,QAAAA,KAAK,CAACa,MAAN,CAAarB,KAAb,EAAoB,CAApB;AACP;;AACD,aAAO,CAAC,GAAGQ,KAAJ,CAAP;;AACR,SAAKhB,KAAK,CAAC8B,YAAX;AACQ,UAAIrB,EAAE,GAAGQ,MAAM,CAACM,OAAP,CAAed,EAAxB;AACA,UAAIsB,KAAK,GAAG7B,SAAS,CAAC,CAAC,GAAGc,KAAJ,CAAD,EAAaP,EAAb,CAArB;;AACA,UAAIsB,KAAK,KAAK,CAAC,CAAf,EAAkB;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAM,CAACM,OAAnB;AACAP,QAAAA,KAAK,CAACe,KAAD,CAAL,GAAed,MAAM,CAACM,OAAtB;AACP;;AACD,aAAO,CAAC,GAAGP,KAAJ,CAAP;;AACR;AAAS,aAAOA,KAAP;AA5BjB;AA+BP,CAlCD;;AAmCA,eAAeD,SAAf","sourcesContent":["import *  as types from './../constants/ActionTypes';\r\n// var data= JSON.parse(localStorage.getItem(\"Products\"));\r\n// var initialState =data ?  data : [];\r\n// var initialState = [\r\n//         { ID: 11100, Price: 1000, Name: 'samsung s1', Brand: 'SamSung' },\r\n//         { ID: 1, Price: 10200, Name: 'samsung s2', Brand: 'SamSung' },\r\n//         { ID: 2, Price: 10300, Name: 'samsung s3', Brand: 'SamSung' },\r\n//         { ID: 3, Price: 10040, Name: 'samsung s4', Brand: 'SamSung' }\r\n// ];\r\nvar initialState = [];\r\nvar findIndex = (Products, id) => {\r\n        var result = -1;\r\n        Products.forEach((value, index) => {\r\n                if (value.ID == id)\r\n                        result = index;\r\n        });\r\n        \r\n        return result;\r\n}\r\nvar randomID = function () {\r\n        // Math.random should be unique because of its seeding algorithm.\r\n        // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n        // after the decimal.\r\n        return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\nvar myReducer = (state = initialState, action) => {\r\n\r\n\r\n        switch (action.type) {\r\n                case types.LIST_ALL:\r\n                        return state;\r\n                case types.Add_Product:\r\n                        var id = action.ID;\r\n                        var index = findIndex(state, id);\r\n                        var newProduct = {\r\n                                ID: randomID(),\r\n                                Price: action.Product.Price,\r\n                                Name: action.Product.Name,\r\n                                Brand: action.Product.bBrand\r\n                        }\r\n                        state.push(newProduct);\r\n                        // localStorage.setItem('Products', JSON.stringify(state))\r\n                        return [...state];\r\n                case types.Delete_Product:\r\n                        if (index !== -1) {\r\n                                state.splice(index, 1)\r\n                        }\r\n                        return [...state];\r\n                case types.Edit_Product:\r\n                        var ID = action.Product.ID;\r\n                        var Index = findIndex([...state], ID);\r\n                        if (Index !== -1) {\r\n                                console.log(action.Product);\r\n                                state[Index] = action.Product;\r\n                        }\r\n                        return [...state];\r\n                default: return state;\r\n\r\n        }\r\n};\r\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}