{"ast":null,"code":"import * as types from './../constants/ActionTypes'; // var data= JSON.parse(localStorage.getItem(\"Products\"));\n// var initialState =data ?  data : [];\n\nvar initialState = [{\n  ID: 11100,\n  Price: 1000,\n  Name: 'samsung s1',\n  Brand: 'SamSung'\n}, {\n  ID: 1,\n  Price: 1000,\n  Name: 'samsung s2',\n  Brand: 'SamSung'\n}, {\n  ID: 2,\n  Price: 1000,\n  Name: 'samsung s3',\n  Brand: 'SamSung'\n}, {\n  ID: 3,\n  Price: 1000,\n  Name: 'samsung s4',\n  Brand: 'SamSung'\n}];\n\nvar findIndex = (Products, id) => {\n  var result = -1;\n  Products.forEach((value, index) => {\n    if (value.ID.toString() === id.toString()) result = index;\n  });\n  return result;\n};\n\nvar myReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.Add_Product:\n      var newProduct = {\n        ID: 0,\n        Price: action.Product.price,\n        Name: action.Product.name,\n        Brand: action.Product.brand\n      };\n      state.push(newProduct); // localStorage.setItem('Products', JSON.stringify(state))\n\n      return [...state];\n\n    case types.Delete_Product:\n      var id = action.ID;\n      var index = findIndex(state, id);\n\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n\n      return [...state];\n\n    case types.Delete_Product:\n      var id = action.ID;\n      var index = findIndex(state, id);\n\n      if (index !== -1) {\n        state.splice(index, 1);\n      }\n\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default myReducer;","map":{"version":3,"sources":["D:/ReactJS/bandienthoai/src/reducers/Products.js"],"names":["types","initialState","ID","Price","Name","Brand","findIndex","Products","id","result","forEach","value","index","toString","myReducer","state","action","type","LIST_ALL","Add_Product","newProduct","Product","price","name","brand","push","Delete_Product","splice"],"mappings":"AAAA,OAAO,KAAMA,KAAb,MAAwB,4BAAxB,C,CACA;AACA;;AACA,IAAIC,YAAY,GAAE,CACF;AAACC,EAAAA,EAAE,EAAC,KAAJ;AAAWC,EAAAA,KAAK,EAAE,IAAlB;AAAwBC,EAAAA,IAAI,EAAE,YAA9B;AAA4CC,EAAAA,KAAK,EAAE;AAAnD,CADE,EAEF;AAACH,EAAAA,EAAE,EAAC,CAAJ;AAAOC,EAAAA,KAAK,EAAE,IAAd;AAAoBC,EAAAA,IAAI,EAAE,YAA1B;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CAFE,EAGF;AAACH,EAAAA,EAAE,EAAC,CAAJ;AAAOC,EAAAA,KAAK,EAAE,IAAd;AAAoBC,EAAAA,IAAI,EAAE,YAA1B;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CAHE,EAIF;AAACH,EAAAA,EAAE,EAAC,CAAJ;AAAOC,EAAAA,KAAK,EAAE,IAAd;AAAoBC,EAAAA,IAAI,EAAE,YAA1B;AAAwCC,EAAAA,KAAK,EAAE;AAA/C,CAJE,CAAlB;;AAMA,IAAIC,SAAS,GAAE,CAACC,QAAD,EAAWC,EAAX,KAAgB;AACvB,MAAIC,MAAM,GAAE,CAAC,CAAb;AACAF,EAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC3B,QAAGD,KAAK,CAACT,EAAN,CAASW,QAAT,OAAwBL,EAAE,CAACK,QAAH,EAA3B,EACAJ,MAAM,GAACG,KAAP;AACP,GAHD;AAKA,SAAOH,MAAP;AACP,CARD;;AASA,IAAIK,SAAS,GAAE,CAACC,KAAK,GAAGd,YAAT,EAAuBe,MAAvB,KAAgC;AACvC,UAAOA,MAAM,CAACC,IAAd;AACQ,SAAKjB,KAAK,CAACkB,QAAX;AACQ,aAAOH,KAAP;;AACR,SAAKf,KAAK,CAACmB,WAAX;AACQ,UAAIC,UAAU,GAAE;AACRlB,QAAAA,EAAE,EAAE,CADI;AAERC,QAAAA,KAAK,EAAEa,MAAM,CAACK,OAAP,CAAeC,KAFd;AAGRlB,QAAAA,IAAI,EAAEY,MAAM,CAACK,OAAP,CAAeE,IAHb;AAIRlB,QAAAA,KAAK,EAAEW,MAAM,CAACK,OAAP,CAAeG;AAJd,OAAhB;AAMAT,MAAAA,KAAK,CAACU,IAAN,CAAWL,UAAX,EAPR,CAQQ;;AACA,aAAO,CAAC,GAAGL,KAAJ,CAAP;;AACR,SAAKf,KAAK,CAAC0B,cAAX;AACQ,UAAIlB,EAAE,GAAEQ,MAAM,CAACd,EAAf;AAEA,UAAIU,KAAK,GAAGN,SAAS,CAACS,KAAD,EAAQP,EAAR,CAArB;;AACA,UAAGI,KAAK,KAAK,CAAC,CAAd,EAAgB;AACRG,QAAAA,KAAK,CAACY,MAAN,CAAaf,KAAb,EAAoB,CAApB;AAEP;;AACD,aAAO,CAAC,GAAGG,KAAJ,CAAP;;AACA,SAAKf,KAAK,CAAC0B,cAAX;AACQ,UAAIlB,EAAE,GAAEQ,MAAM,CAACd,EAAf;AAEA,UAAIU,KAAK,GAAGN,SAAS,CAACS,KAAD,EAAQP,EAAR,CAArB;;AACA,UAAGI,KAAK,KAAK,CAAC,CAAd,EAAgB;AACRG,QAAAA,KAAK,CAACY,MAAN,CAAaf,KAAb,EAAoB,CAApB;AAEP;;AACD,aAAO,CAAC,GAAGG,KAAJ,CAAP;;AAChB;AAAS,aAAOA,KAAP;AA/BjB;AAkCP,CAnCD;;AAoCA,eAAeD,SAAf","sourcesContent":["import *  as types from './../constants/ActionTypes';\r\n// var data= JSON.parse(localStorage.getItem(\"Products\"));\r\n// var initialState =data ?  data : [];\r\nvar initialState =[\r\n                {ID:11100, Price: 1000, Name: 'samsung s1', Brand: 'SamSung'},\r\n                {ID:1, Price: 1000, Name: 'samsung s2', Brand: 'SamSung'},\r\n                {ID:2, Price: 1000, Name: 'samsung s3', Brand: 'SamSung'},\r\n                {ID:3, Price: 1000, Name: 'samsung s4', Brand: 'SamSung'},\r\n                ];\r\nvar findIndex =(Products, id)=>{\r\n        var result =-1;\r\n        Products.forEach((value, index) => {\r\n                if(value.ID.toString() === id.toString())\r\n                result=index;\r\n        });\r\n     \r\n        return result;\r\n}\r\nvar myReducer =(state = initialState, action)=>{\r\n        switch(action.type){\r\n                case types.LIST_ALL:\r\n                        return state;\r\n                case types.Add_Product:\r\n                        var newProduct ={\r\n                                ID: 0,\r\n                                Price: action.Product.price,\r\n                                Name: action.Product.name,\r\n                                Brand: action.Product.brand\r\n                        }\r\n                        state.push(newProduct);\r\n                        // localStorage.setItem('Products', JSON.stringify(state))\r\n                        return [...state];\r\n                case types.Delete_Product:\r\n                        var id =action.ID;\r\n                        \r\n                        var index = findIndex(state, id);\r\n                        if(index !== -1){\r\n                                state.splice(index, 1)\r\n                               \r\n                        }\r\n                        return [...state];\r\n                        case types.Delete_Product:\r\n                                var id =action.ID;\r\n                                \r\n                                var index = findIndex(state, id);\r\n                                if(index !== -1){\r\n                                        state.splice(index, 1)\r\n                                       \r\n                                }\r\n                                return [...state];\r\n                default: return state;\r\n\r\n        }\r\n};\r\nexport default myReducer;"]},"metadata":{},"sourceType":"module"}